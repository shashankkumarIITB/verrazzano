Name:         kube-proxy
Namespace:    kube-system
Labels:       app=kube-proxy
Annotations:  <none>

Data
====
config.conf:
----
{"apiVersion":"kubeproxy.config.k8s.io/v1alpha1","kind":"KubeProxyConfiguration","bindAddress":"0.0.0.0","clientConnection":{"acceptContentTypes":"","burst":10,"contentType":"application/vnd.kubernetes.protobuf","kubeconfig":"/var/lib/kube-proxy/kubeconfig.conf","qps":5},"clusterCIDR":"10.244.0.0/16","configSyncPeriod":"15m0s","conntrack":{"maxPerCore":32768,"min":131072,"tcpCloseWaitTimeout":"1h0m0s","tcpEstablishedTimeout":"24h0m0s"},"enableProfiling":false,"healthzBindAddress":"0.0.0.0:10256","hostnameOverride":"","iptables":{"masqueradeAll":false,"masqueradeBit":14,"minSyncPeriod":"0s","syncPeriod":"30s"},"ipvs":{"excludeCIDRs":null,"minSyncPeriod":"0s","scheduler":"","strictARP":false,"syncPeriod":"30s"},"metricsBindAddress":"127.0.0.1:10249","mode":"","nodePortAddresses":null,"oomScoreAdj":-999,"portRange":"","udpIdleTimeout":"4h10m0s","winkernel":{"enableDSR":false,"networkName":"","sourceVip":""}}
kube_proxy_init.sh:
----
#!/bin/sh
log_info () { echo "$(date) $@"; }
log_error () { >&2 echo "$(date) $@"; }

log_info "Configure kube-proxy mode(iptables or ipvs)"
cp /var/lib/kube-proxy-config/kubeconfig.conf /var/lib/kube-proxy/kubeconfig.conf || exit $?
cp /var/lib/kube-proxy-config/config.conf /var/lib/kube-proxy/config.conf || exit $?
log_info "Copied kube-proxy configuration files"
sed -i 's/\("\?kubeconfig"\?\s*:\s*\)"\?[^"]*"\?/\1"\/var\/lib\/kube-proxy\/kubeconfig\.conf"/' /var/lib/kube-proxy/config.conf || exit $?

curl --max-time 10 -o /dev/null -s -w "%{http_code}\n" http://169.254.169.254/ | grep -q 404
imds_endpoint_reachable=$?
if [ $imds_endpoint_reachable -ne 0 ]; then
  log_error "IMDS endpoint not reachable"
  exit $imds_endpoint_reachable
fi
log_info "IMDS endpoint reachable"

oke_node_version_imds=$(curl -s -H "Authorization: Bearer Oracle" --max-time 30 --fail -L0 http://169.254.169.254/opc/v2/instance/metadata/oke-k8version)
version_fetch_result=$?
log_info "K8s version($version_fetch_result): $oke_node_version_imds"
if [ $version_fetch_result -ne 0 ]; then
  oke_node_version_imds=$(curl -s --max-time 30 --fail -L0 http://169.254.169.254/opc/v1/instance/metadata/oke-k8version)
  version_fetch_result=$?
  log_info "K8s version($version_fetch_result): $oke_node_version_imds"
  if [ $version_fetch_result -ne 0 ]; then
    log_error "Unable to fetch K8s version($version_fetch_result): $oke_node_version_imds"
    exit 1
  fi
fi

oke_kubeproxy_proxy=$(curl -s -H "Authorization: Bearer Oracle" --max-time 30 --fail -L0 http://169.254.169.254/opc/v2/instance/metadata/oke-kubeproxy-proxy-mode)
kubeproxy_mode_fetch_result=$?
log_info "kubeproxy mode ($kubeproxy_mode_fetch_result): $oke_kubeproxy_proxy"
if [ $kubeproxy_mode_fetch_result -ne 0 ]; then
  oke_kubeproxy_proxy=$(curl -s --max-time 30 --fail -L0 http://169.254.169.254/opc/v1/instance/metadata/oke-kubeproxy-proxy-mode)
  kubeproxy_mode_fetch_result=$?
  log_info "kubeproxy mode ($kubeproxy_mode_fetch_result): $oke_kubeproxy_proxy"
  if [ $kubeproxy_mode_fetch_result -ne 0 ]; then
    log_error "Unable to fetch kubeproxy mode from imds ($kubeproxy_mode_fetch_result): $oke_kubeproxy_proxy. Using iptables."
    oke_kubeproxy_proxy="iptables"
  fi
fi

major_version=$(echo "$oke_node_version_imds" | sed 's/v\([0-9]*\).\([0-9]*\).*/\1/')
minor_version=$(echo "$oke_node_version_imds" | sed 's/v\([0-9]*\).\([0-9]*\).*/\2/')
if [ "$oke_kubeproxy_proxy" = "ipvs" ] && ( ( [ "$major_version" -gt 1 ] ) || ( [ "$major_version" -eq 1 ] && [ "$minor_version" -gt 21 ] ) ); then
  sed -i 's/\("\?mode"\?\s*:\s*\)"[^"]*"/\1"ipvs"/' /var/lib/kube-proxy/config.conf || exit $?
  log_info "ipvs mode is enabled"
else
  log_info "iptables mode is enabled"
fi
log_info "kube-proxy configuration is completed"
kubeconfig.conf:
----
{"apiVersion":"v1","kind":"Config","clusters":[{"cluster":{"certificate-authority":"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt","server":"https://10.0.0.10:6443"},"name":"default"}],"contexts":[{"context":{"cluster":"default","namespace":"default","user":"default"},"name":"default"}],"current-context":"default","users":[{"name":"default","user":{"tokenFile":"/var/run/secrets/kubernetes.io/serviceaccount/token"}}]}
Events:  <none>
